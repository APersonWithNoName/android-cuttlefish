name: Build ARM64 Debian Package

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v0.0.1'  # 添加默认值

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 防止卡死

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整git历史

      - name: Setup Environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            devscripts \
            debhelper \
            dh-make \
            build-essential \
            golang \
            qemu-* 

      - name: Build Packages
        run: |
          set -euxo pipefail
          echo "=== Building Debian Packages ==="
          bash tools/buildutils/build_packages.sh

      - name: Prepare Artifacts
        run: |
          mkdir -p "$GITHUB_WORKSPACE/release"
          find "$GITHUB_WORKSPACE" \
            \( -name '*.deb' -o -name '*.gz' -o -name '*.tar' \) \
            -exec mv -v {} "$GITHUB_WORKSPACE/release" \;
          
          echo "=== Artifacts List ==="
          ls -lh "$GITHUB_WORKSPACE/release"

      - name: Create Archive
        run: |
          tar -czvf android-cuttlefish-aarch64linux.tar.gz \
            -C "$GITHUB_WORKSPACE/release" .
          sha256sum android-cuttlefish-aarch64linux.tar.gz > checksum.txt

      - name: Verify Artifact
        run: |
          test -f android-cuttlefish-aarch64linux.tar.gz || exit 1
          tar -tzf android-cuttlefish-aarch64linux.tar.gz | head

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          release_name: "ARM64 Cuttlefish ${{ github.event.inputs.tag_name }}"
          body: "Automated ARM64 Debian package build"
          draft: false
          prerelease: ${{ !contains(github.event.inputs.tag_name, 'v') }}

      - name: Upload Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: |
            android-cuttlefish-aarch64linux.tar.gz
            checksum.txt
          asset_name: |
            cuttlefish-arm64-${{ github.event.inputs.tag_name }}.tar.gz
            checksum-${{ github.event.inputs.tag_name }}.txt
